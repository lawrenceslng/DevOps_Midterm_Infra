name: Delete Images From ECR
on:
  workflow_dispatch:  # Allows manual trigger

jobs:
  delete-ecr-images:
    name: Delete Latest Images and Retag Previous as Latest
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Infrastructure Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_ACCOUNT_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get latest and previous image tags for both repos
        id: get-tags
        run: |
          REPO_NAMES=("midterm-backend" "midterm-frontend")
          REGION="us-east-1"
          
          for REPO_NAME in "${REPO_NAMES[@]}"; do
            echo "Fetching image tags for $REPO_NAME"
            IMAGES_JSON=$(aws ecr describe-images --repository-name $REPO_NAME --region $REGION --query "imageDetails | sort_by(@, &imagePushedAt) | reverse(@)" --output json)
            IMAGE_TAGS=($(echo $IMAGES_JSON | jq -r '.[].imageTags[]' | sort -r))

            if [ ${#IMAGE_TAGS[@]} -lt 2 ]; then
              echo "Error: Not enough images in ECR repository $REPO_NAME"
              exit 1
            fi

            LATEST_TAG="${IMAGE_TAGS[0]}"
            PREVIOUS_TAG="${IMAGE_TAGS[1]}"

            echo "$REPO_NAME LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
            echo "$REPO_NAME PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          done

      - name: Delete latest image tag from both repos
        run: |
          REPO_NAMES=("midterm-backend" "midterm-frontend")
          REGION="us-east-1"

          for REPO_NAME in "${REPO_NAMES[@]}"; do
            # Use explicit variable names
            if [ "$REPO_NAME" == "midterm-backend" ]; then
              LATEST_TAG="${midterm-backend_LATEST_TAG}"
            elif [ "$REPO_NAME" == "midterm-frontend" ]; then
              LATEST_TAG="${midterm-frontend_LATEST_TAG}"
            fi

            echo "Deleting $LATEST_TAG from $REPO_NAME"
            aws ecr batch-delete-image --repository-name $REPO_NAME --region $REGION --image-ids imageTag=$LATEST_TAG
          done

      - name: Re-tag previous image as latest
        run: |
          REPO_NAMES=("midterm-backend" "midterm-frontend")
          REGION="us-east-1"

          for REPO_NAME in "${REPO_NAMES[@]}"; do
            # Manually check and set the PREVIOUS_TAG for each repository
            if [ "$REPO_NAME" == "midterm-backend" ]; then
              PREVIOUS_TAG="${midterm-backend_PREVIOUS_TAG}"
            elif [ "$REPO_NAME" == "midterm-frontend" ]; then
              PREVIOUS_TAG="${midterm-frontend_PREVIOUS_TAG}"
            fi

            echo "Re-tagging $PREVIOUS_TAG as latest for $REPO_NAME"
            aws ecr batch-get-image --repository-name $REPO_NAME --region $REGION --image-ids imageTag=$PREVIOUS_TAG --query 'images[].imageManifest' --output text > image-manifest.json
            aws ecr put-image --repository-name $REPO_NAME --region $REGION --image-tag latest --image-manifest file://image-manifest.json
          done


      - name: Cleanup local Docker images
        run: docker system prune -af
