name: Nightly Build, Test, and Deploy

on:
  schedule:
    - cron: "0 8 * * *"  # Runs every day at 12 AM Pacific time
  workflow_dispatch:  # Allows manual trigger

jobs:
  build-and-test:
    name: Build and Test in EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Infrastructure Repository
        uses: actions/checkout@v4
        with:
          path: infra

      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          repository: lawrenceslng/DevOps_Midterm_SPA
          path: app-repo

      - name: Set up Node
        uses: actions/setup-node@v4
        with: 
          node-version: 20
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Create Temp EC2 for Verification
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0d2cec4407f209198 \
            --instance-type t2.micro \
            --subnet-id subnet-06ad5d704458ea4d2 \
            --security-group-ids sg-0432f9c58280ae894 \
            --associate-public-ip-address \
            --query 'Instances[0].InstanceId' --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          sleep 15 # Wait for EC2 to be ready

      - name: Build the Nightly build
        run: |
          cd app-repo/client && npm ci && npm run build

      # - name: Upload frontend build artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: frontend-build
      #     path: client/build/

      - name: Wait for EC2 instance to be ready
        run: |
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Make scripts executable
        run: |
          chmod +x infra/scripts/setup_ec2.sh
          chmod +x infra/scripts/local_smoke_test.sh
          chmod +x infra/scripts/copy_to_temp_ec2.sh

      - name: Copy files to EC2
        env:
          PUBLIC_IP: ${{ env.PUBLIC_IP }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ACCOUNT_REGION: ${{ secrets.AWS_ACCOUNT_REGION }}
          EC2_SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          DB_HOST: ${{ secrets.TEMP_DB_HOST }}
          DB_NAME: ${{ secrets.TEMP_DB_NAME }}
          DB_PASSWORD: ${{ secrets.TEMP_DB_PASSWORD }}
          DB_USER: ${{ secrets.TEMP_DB_USER }}
        run: ./infra/scripts/copy_to_temp_ec2.sh

      # - name: Setup and Run Tests in EC2
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ec2-user@$PUBLIC_IP '
      #       /home/ec2-user/setup_ec2.sh && /home/ec2-user/smoke_test.sh
      #     '

      # - name: Remove Temp EC2
      #   if: always()
      #   run: |
      #     aws ec2 terminate-instances --instance-ids $INSTANCE_ID

   ### If tests success, push to ECR + deploy to QA
  # push-to-ecr:
  #   name: Push to ECR
  #   needs: build-and-test
  #   if: success()  # Only run if tests passed
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout Infrastructure Repository
  #       uses: actions/checkout@v4
  #       with:
  #         path: infra

  #     - name: Checkout App Repository
  #       uses: actions/checkout@v4
  #       with:
  #         repository: lawrenceslng/DevOps_Midterm_SPA
  #         path: app-repo
      
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-region: ${{ secrets.AWS_ACCOUNT_REGION }}
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

  #     # - name: Download frontend build artifact
  #     #   uses: actions/download-artifact@v3
  #     #   with:
  #     #     name: frontend-build
  #     #     path: app-repo/client/build/

  #     - name: Set DateTime Tag
  #       run: |
  #         echo "TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
     
  #     - name: Make build-and-push.sh executable
  #       run: |
  #         chmod +x infra/scripts/build_and_push.sh

  #     - name: Run Build and Push Script
  #       env:
  #         AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #         AWS_REGION: ${{ secrets.AWS_ACCOUNT_REGION }}
  #         TAG: ${{ env.TAG }}
  #       run: |
  #         echo "Running build and push script"
  #         ./infra/scripts/build_and_push.sh app-repo

  # deploy-to-qa:
  #   name: Deploy to QA EC2
  #   needs: push-to-ecr
  #   runs-on: self-hosted

  #   steps:
  #     - name: Pull from ECR and Deploy
  #       run: |
  #         echo "deploying to qa"
  #         aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  #         docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/midterm-frontend:latest
  #         docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/midterm-backend:latest
  #         docker stop frontend-container || true
  #         docker rm frontend-container || true
  #         docker stop backend-container || true
  #         docker rm backend-container || true
  #         docker run -d --name frontend-container -p 3000:3000 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/midterm-frontend:latest
  #         docker run -d --name backend-container -p 3001:3001 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/midterm-backend:latest


